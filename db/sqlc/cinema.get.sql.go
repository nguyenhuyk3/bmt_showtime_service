// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cinema.get.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCinemaByShowtimeId = `-- name: GetCinemaByShowtimeId :one
SELECT c.id, c.name, c.city, c.location, c.is_released, c.created_at, c.updated_at, a.name AS RoomName
FROM showtimes sh
JOIN auditoriums a ON sh.auditorium_id = a.id
JOIN cinemas c ON a.cinema_id = c.id
WHERE sh.id = $1
    AND sh.show_date >= CURRENT_DATE
`

type GetCinemaByShowtimeIdRow struct {
	ID         int32            `json:"id"`
	Name       string           `json:"name"`
	City       Cities           `json:"city"`
	Location   string           `json:"location"`
	IsReleased bool             `json:"is_released"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
	Roomname   string           `json:"roomname"`
}

func (q *Queries) GetCinemaByShowtimeId(ctx context.Context, id int32) (GetCinemaByShowtimeIdRow, error) {
	row := q.db.QueryRow(ctx, getCinemaByShowtimeId, id)
	var i GetCinemaByShowtimeIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.City,
		&i.Location,
		&i.IsReleased,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Roomname,
	)
	return i, err
}

const getCinemasForShowingFilmByFilmId = `-- name: GetCinemasForShowingFilmByFilmId :many
SELECT DISTINCT c.id, c.name, c.city, c.location
FROM showtimes sh
JOIN auditoriums a ON sh.auditorium_id = a.id
JOIN cinemas c ON a.cinema_id = c.id
WHERE sh.film_id = $1
    AND sh.show_date >= CURRENT_DATE
    AND sh.is_released = true
    AND c.is_released = true
    AND a.is_released = true
`

type GetCinemasForShowingFilmByFilmIdRow struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	City     Cities `json:"city"`
	Location string `json:"location"`
}

func (q *Queries) GetCinemasForShowingFilmByFilmId(ctx context.Context, filmID int32) ([]GetCinemasForShowingFilmByFilmIdRow, error) {
	rows, err := q.db.Query(ctx, getCinemasForShowingFilmByFilmId, filmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCinemasForShowingFilmByFilmIdRow{}
	for rows.Next() {
		var i GetCinemasForShowingFilmByFilmIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
