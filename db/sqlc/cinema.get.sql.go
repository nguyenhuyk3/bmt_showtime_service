// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cinema.get.sql

package sqlc

import (
	"context"
)

const getCinemasForShowingFilmByFilmId = `-- name: GetCinemasForShowingFilmByFilmId :many
SELECT DISTINCT c.id, c.name, c.city, c.location, c.is_released, c.created_at, c.updated_at
FROM showtimes sh
JOIN auditoriums a ON sh.auditorium_id = a.id
JOIN cinemas c ON a.cinema_id = c.id
WHERE sh.film_id = $1
    AND sh.show_date >= CURRENT_DATE
    AND sh.is_released = true
    AND c.is_released = true
    AND a.is_released = true
`

func (q *Queries) GetCinemasForShowingFilmByFilmId(ctx context.Context, filmID int32) ([]Cinema, error) {
	rows, err := q.db.Query(ctx, getCinemasForShowingFilmByFilmId, filmID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cinema{}
	for rows.Next() {
		var i Cinema
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.City,
			&i.Location,
			&i.IsReleased,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
