// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auditorium.get.sql

package sqlc

import (
	"context"
)

const getAuditoriumByShowtimeId = `-- name: GetAuditoriumByShowtimeId :one
SELECT a.id, a.cinema_id, a.name, a.seat_capacity, a.is_released, a.created_at, a.updated_at
FROM showtimes sh
JOIN auditoriums a ON sh.auditorium_id = a.id
WHERE sh.id = $1
`

func (q *Queries) GetAuditoriumByShowtimeId(ctx context.Context, id int32) (Auditorium, error) {
	row := q.db.QueryRow(ctx, getAuditoriumByShowtimeId, id)
	var i Auditorium
	err := row.Scan(
		&i.ID,
		&i.CinemaID,
		&i.Name,
		&i.SeatCapacity,
		&i.IsReleased,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isAuditoriumExist = `-- name: IsAuditoriumExist :one
SELECT EXISTS (
    SELECT 1 FROM "auditoriums" WHERE id = $1 AND is_released = true
) AS exists
`

func (q *Queries) IsAuditoriumExist(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, isAuditoriumExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
