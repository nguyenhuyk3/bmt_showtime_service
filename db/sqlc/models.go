// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Cities string

const (
	CitiesHOCHIMINH Cities = "HO_CHI_MINH"
	CitiesHANOI     Cities = "HA_NOI"
	CitiesDONGNAI   Cities = "DONG_NAI"
)

func (e *Cities) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Cities(s)
	case string:
		*e = Cities(s)
	default:
		return fmt.Errorf("unsupported scan type for Cities: %T", src)
	}
	return nil
}

type NullCities struct {
	Cities Cities `json:"cities"`
	Valid  bool   `json:"valid"` // Valid is true if Cities is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCities) Scan(value interface{}) error {
	if value == nil {
		ns.Cities, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Cities.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCities) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Cities), nil
}

type SeatStatuses string

const (
	SeatStatusesAvailable SeatStatuses = "available"
	SeatStatusesReserved  SeatStatuses = "reserved"
	SeatStatusesBooked    SeatStatuses = "booked"
)

func (e *SeatStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeatStatuses(s)
	case string:
		*e = SeatStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for SeatStatuses: %T", src)
	}
	return nil
}

type NullSeatStatuses struct {
	SeatStatuses SeatStatuses `json:"seat_statuses"`
	Valid        bool         `json:"valid"` // Valid is true if SeatStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeatStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.SeatStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeatStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeatStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SeatStatuses), nil
}

type SeatTypes string

const (
	SeatTypesStandard SeatTypes = "standard"
	SeatTypesCoupled  SeatTypes = "coupled"
	SeatTypesVip      SeatTypes = "vip"
)

func (e *SeatTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeatTypes(s)
	case string:
		*e = SeatTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for SeatTypes: %T", src)
	}
	return nil
}

type NullSeatTypes struct {
	SeatTypes SeatTypes `json:"seat_types"`
	Valid     bool      `json:"valid"` // Valid is true if SeatTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeatTypes) Scan(value interface{}) error {
	if value == nil {
		ns.SeatTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeatTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeatTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SeatTypes), nil
}

type Auditoriums struct {
	ID           int32            `json:"id"`
	CinemaID     int32            `json:"cinema_id"`
	Name         string           `json:"name"`
	SeatCapacity int32            `json:"seat_capacity"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type Cinemas struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	City      Cities           `json:"city"`
	Location  string           `json:"location"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type FilmIds struct {
	ID     int32 `json:"id"`
	FilmID int32 `json:"film_id"`
}

type Seats struct {
	ID           int32            `json:"id"`
	AuditoriumID int32            `json:"auditorium_id"`
	SeatNumber   string           `json:"seat_number"`
	SeatType     SeatTypes        `json:"seat_type"`
	Price        int32            `json:"price"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type ShowtimeSeats struct {
	ID         int32            `json:"id"`
	ShowtimeID int32            `json:"showtime_id"`
	SeatID     int32            `json:"seat_id"`
	Status     SeatStatuses     `json:"status"`
	BookedBy   string           `json:"booked_by"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	BookedAt   pgtype.Timestamp `json:"booked_at"`
}

type Showtimes struct {
	ID           int32            `json:"id"`
	FilmID       int32            `json:"film_id"`
	AuditoriumID int32            `json:"auditorium_id"`
	StartTime    pgtype.Timestamp `json:"start_time"`
	EndTime      pgtype.Timestamp `json:"end_time"`
	IsDeleted    bool             `json:"is_deleted"`
	ChangedBy    string           `json:"changed_by"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}
